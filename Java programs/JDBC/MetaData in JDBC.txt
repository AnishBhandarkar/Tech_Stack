MetaData
---------
Metadata means data about data. I.e. Metadata provides extra information about our original 
data.
Eg:
Metadata about database is nothing but database product name, database version etc..
Metadata about ResultSet means no of columns, each column name, column type etc..

JDBC provides support for 3 Types of Metadata
1. DatabaseMetaData
2. ResultSetMetaData
3. ParameterMetaData

1. DatabaseMetaData
##########################
It is an interface present in java.sql package.
Driver Software vendor is responsible to provide implementation.
We can use DatabaseMetaData to get information about our database like database product name, driver name, version, number of tables etc..
We can also use DatabaseMetaData to check whether a particular feature is supported by DB or not like stored procedures, full joins etc..
We can get DatabaseMetaData object by using getMetaData() method of Connection interface.
public DatabaseMetaData getMetaData();

Eg: DatabaseMetaData dbmd=con.getMetaData();
Once we got DatabaseMetaData object we can call several methods on that object like
 getDatabaseProductName()
 getDatabaseProductVersion()
 getMaxColumnsInTable()
 supportsStoredProcedures()
 etc...


App1: Program to display Database meta information by using DataBaseMetaData
--------------------------------------------------------------------------------
1) import java.sql.*; 
2) class DatabaseMetaDataDemo1 
3) { 
4) public static void main(String[] args) throws Exception 
5) { 
6) Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE
","system","durga"); 
7) DatabaseMetaData dbmd=con.getMetaData(); 
8) System.out.println("Database Product Name:"+dbmd.getDatabaseProductName()); 
9) System.out.println("DatabaseProductVersion:"+dbmd.getDatabaseProductVersion());
10) System.out.println("DatabaseMajorVersion:"+dbmd.getDatabaseMajorVersion()); 
11) System.out.println("DatabaseMinorVersion:"+dbmd.getDatabaseMinorVersion()); 
12) System.out.println("JDBCMajorVersion:"+dbmd.getJDBCMajorVersion()); 
13) System.out.println("JDBCMinorVersion:"+dbmd.getJDBCMinorVersion()); 
14) System.out.println("DriverName:"+dbmd.getDriverName()); 
15) System.out.println("DriverVersion:"+dbmd.getDriverVersion()); 
16) System.out.println("URL:"+dbmd.getURL()); 
17) System.out.println("UserName:"+dbmd.getUserName()); 
18) System.out.println("MaxColumnsInTable:"+dbmd.getMaxColumnsInTable()); 
19) System.out.println("MaxRowSize:"+dbmd.getMaxRowSize()); 
20) System.out.println("MaxStatementLength:"+dbmd.getMaxStatementLength()); 
21) System.out.println("MaxTablesInSelect"+dbmd.getMaxTablesInSelect()); 
22) System.out.println("MaxTableNameLength:"+dbmd.getMaxTableNameLength()); 
23) System.out.println("SQLKeywords:"+dbmd.getSQLKeywords()); 
24) System.out.println("NumericFunctions:"+dbmd.getNumericFunctions()); 
25) System.out.println("StringFunctions:"+dbmd.getStringFunctions()); 
26) System.out.println("SystemFunctions:"+dbmd.getSystemFunctions()); 
27) System.out.println("supportsFullOuterJoins:"+dbmd.supportsFullOuterJoins()); 
28) System.out.println("supportsStoredProcedures:"+dbmd.supportsStoredProcedures());
 
29) con.close(); 
30) } 
31) }


App2: Program to display Table Names present in Database by using DataBaseMetaData
-----------------------------------------------------------------------------------
1) import java.sql.*; 
2) import java.util.*; 
3) class DatabaseMetaDataDemo2 
4) { 
5) public static void main(String[] args) throws Exception 
6) { 
7) int count=0; 
8) Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE
","system","durga"); 
9) DatabaseMetaData dbmd=con.getMetaData(); 
10) String catalog=null; 
11) String schemaPattern=null; 
12) String tableNamePattern=null; 
13) String[] types=null; 
14) ResultSet rs = dbmd.getTables(catalog,schemaPattern,tableNamePattern,types); 
15) //the parameters can help limit the number of tables that are returned in the ResultSe
t 
16) //the ResultSet contains 10 columns and 3rd column represent table names. 
17) while(rs.next()) 
18) { 
19) count++; 
20) System.out.println(rs.getString(3)); 
21) } 
22) System.out.println("The number of tables:"+count); 
23) con.close(); 
24) } 
25) } 

Note: Some driver softwares may not capture complete information. In that case we will get 
default values like zero.
Eg: getMaxRowSize() âž” 0


ResultSetMetaData:
####################
It is an interface present in java.sql package.
Driver software vendor is responsible to provide implementation.
It provides information about database table represented by ResultSet object.
Useful to get number of columns, column types etc..
We can get ResultSetMetaData object by using getMetaData() method of ResultSet interface.
public ResultSetMetaData getMetaData()
Eg: ResultSetMetaData rsmd=rs.getMetaData();

Once we got ResultSetMetaData object, we can call the following methods on that object like
 getColumnCount()
 getColumnName()
 getColumnType()
 etc...

App3: Program to display Columns meta information by using ResultMetaData
-------------------------------------------------------------------------
1) import java.sql.*; 
2) class ResultSetMetaDataDemo 
3) { 
4) public static void main(String[] args) throws Exception 
5) { 
6) Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE
","system","durga"); 
7) Statement st = con.createStatement(); 
8) ResultSet rs = st.executeQuery("select * from employees"); 
9) ResultSetMetaData rsmd=rs.getMetaData(); 
10) int count=rsmd.getColumnCount(); 
11) for(int i=1;i<= count;i++) 
12) { 
13) System.out.println("Column Number:"+i); 
14) System.out.println("Column Name:"+rsmd.getColumnName(i)); 
15) System.out.println("Column Type:"+rsmd.getColumnType(i)); 
16) System.out.println("Column Size:"+rsmd.getColumnDisplaySize(i)); 
17) System.out.println("---------------"); 
18) } 
19) con.close(); 
20) } 
21) } 


App3: Program to display Table Data including Column Names by using ResultMetaData
-------------------------------------------------------------------------------------
1) import java.sql.*; 
2) class ResultSetMetaDataDemo1 
3) { 
4) public static void main(String[] args) throws Exception 
5) { 
6) Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE
","scott","tiger"); 
7) Statement st = con.createStatement(); 
8) ResultSet rs = st.executeQuery("select * from movies"); 
9) ResultSetMetaData rsmd=rs.getMetaData(); 
10) String col1=rsmd.getColumnName(1); 
11) String col2=rsmd.getColumnName(2); 
12) String col3=rsmd.getColumnName(3); 
13) String col4=rsmd.getColumnName(4); 
14) System.out.println(col1+"\t"+col2+"\t"+col3+"\t"+col4); 
15) System.out.println("---------------------------------"); 
16) while(rs.next()) 
17) { 
18) System.out.println(rs.getInt(1)+"\t"+rs.getString(2)+"\t"+rs.getString(3)+"\t"+rs.get
String(4)); 
19) } 
20) } 
21) }




ParameterMetaData (I):
#####################

It is an interface and present in java.sql package.
Driver Software vendor is responsible to provide implementation.
In General we can use positional parameters(?) while creating PreparedStatement object.
PreparedStatement pst=con.prepareStatement("insert into employees values(?,?,?,?)");
We can use ParameterMetaData to get information about positional parameters like parameter 
count,parameter mode, and parameter type etc...
We can get ParameterMetaData object by using getParameterMetaData() method of 
PreparedStatement interface.
ParameterMetaData pmd=pst.getParameterMetaData();

Once we got ParameterMetaData object, we can call several methods on that object like
1. int getParameterCount() 
2. int getParameterMode(int param) 
3. int getParameterType(int param) 
4. String getParameterTypeName(int param) 
etc..

Important Methods of ParameterMetaData:
1. int getParameterCount()
 Retrieves the number of parameters in the PreparedStatement object for which this 
ParameterMetaData object contains information.
2.int getParameterMode(int param)
 Retrieves the designated parameter's mode.
3. int getParameterType(int param)
 Retrieves the designated parameter's SQL type.
4. String getParameterTypeName(int param)
 Retrieves the designated parameter's database-specific type name.
5. int getPrecision(int param)
 Retrieves the designated parameter's specified column size.
6. int getScale(int param)
 Retrieves the designated parameter's number of digits to right of the decimal point.
7. int isNullable(int param)
 Retrieves whether null values are allowed in the designated parameter.
8. boolean isSigned(int param)
 Retrieves whether values for the designated parameter can be signed numbers.


App14: Program to display Parameter meta information by using ParameterMetaData
--------------------------------------------------------------------------------
1) import java.sql.*; 
2) class ParameterMetaDataDemo 
3) { 
4) public static void main(String[] args) throws Exception 
5) { 
6) Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE
","system","durga"); 
7) PreparedStatement pst = con.prepareStatement("insert into employees values(?,?,?,?)
"); 
8) ParameterMetaData pmd=pst.getParameterMetaData(); 
9) int count=pmd.getParameterCount(); 
10) for(int i=1;i<= count;i++) 
11) { 
12) System.out.println("Parameter Number:"+i); 
13) System.out.println("Parameter Mode:"+pmd.getParameterMode(i)); 
14) System.out.println("Parameter Type:"+pmd.getParameterType(i)); 
15) System.out.println("Parameter Precision:"+pmd.getPrecision(i)); 
16) System.out.println("Parameter Scale:"+pmd.getScale(i)); 
17) System.out.println("Parameter isSigned:"+pmd.isSigned(i)); 
18) System.out.println("Parameter isNullable:"+pmd.isNullable(i)); 
19) System.out.println("---------------"); 
20) } 
21) con.close(); 
22) } 
23) } 
Note: Most of the drivers won't provide support for ParameterMetaData.

