package com.practice;


class Queue{
	private int[] que;
	private int size;
	private int front = -1;
	private int rear = -1;
	
	Queue(int size){
		this.size = size;
		que = new int[size];
	}
	
	public void enqueue(int data) {
		if(rear==size-1) {
			System.out.println("Full");
			return;
		}
		if(front==-1) {
			front = 0;
			rear = 0;
		}
		else {
			rear++;
		}
		que[rear] = data;
	}
	
	public int dequeue() {
		if(front==-1) {
			return -1;
		}
		int data = que[front];
		if(front==rear) {
			front=0;
			rear = 0;
		}
		else {
			front++;
		}
		return data;
	}
	
	public boolean isEmpty() {
		if(front==-1) {
			return true;
		}
		return false;
	}
	
	public int getFront() {
		if(front==-1) {
			return -1;
		}
		return que[front];
	}
	
	public int getRear() {
		if(rear==-1) {
			return -1;
		}
		return que[rear];
	}
	
	public void display() {
		if(front==-1) {
			System.out.println("Empty");
			return;
		}
		int i = front;
		while(i!=rear) {
			System.out.print(que[i]+" ");
			i++;
		}
		System.out.println(que[rear]);
	}
}


public class Practice1{
	public static void main(String[] args) {
		Queue q = new Queue(10);
		q.display();
		q.enqueue(10);
		q.enqueue(20);
		q.enqueue(30);
		q.enqueue(40);
		q.enqueue(50);
		q.display();
		System.out.println(q.dequeue());
		q.display();
		System.out.println(q.isEmpty());
		System.out.println(q.getFront());
		System.out.println(q.getRear());
	}
}





