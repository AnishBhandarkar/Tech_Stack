package com.practice;

import java.util.*;

class Graph{
	int[][] adj;
	int vertices;
	int edges;
	Graph(int vertices){
		this.vertices = vertices;
		adj = new int[vertices][vertices];
	}
	
	//For Undirected Graph
	public void addEdge(int u, int v) {
		adj[u][v] = 1;
		adj[v][u] = 1;
		edges++;
	}
	
	//For Directed Graph
	public void addEdgeDirected(int u, int v) {
		adj[u][v] = 1;
		edges++;
	}
	
	public void display() {
		for(int i=0;i<adj.length;i++) {
			for(int j=0;j<adj.length;j++) {
				System.out.print(adj[i][j]+" ");
			}
			System.out.println();
		}
	}
	
	public void bfs(int src) {
		boolean[] visited = new boolean[vertices];
		Queue<Integer> q = new LinkedList<>();
		visited[src] = true;
		q.add(src);
		while(!q.isEmpty()) {
			int u = q.remove();
			System.out.print(u+" ");
			for(int i=0;i<vertices;i++) {
				if(adj[u][i] == 1 && visited[i] == false) {
					visited[i] = true;
					q.add(i);
				}
			}
		}
		System.out.println();
		
	}
	
	public void dfs(int src) {
		boolean[] visited = new boolean[vertices];
		Stack<Integer> s = new Stack<Integer>(); 
		s.push(src);
		while(!s.isEmpty()) {
			int u = s.pop();
			if(!visited[u]) {
				visited[u] = true;
				System.out.print(u+" ");
				for(int i=0;i<vertices;i++) {
					if(adj[u][i] == 1 && visited[i] == false) {
						s.push(i);
					}
				}
			}
		}
		System.out.println();
	}
}

public class Prac2 {
	
	public static void main(String[] args) {
		Graph g = new Graph(4);
		g.addEdge(0, 1);
		g.addEdge(1, 2);
		g.addEdge(2, 3);
		g.addEdge(0, 3);

		g.display();
		System.out.println(g.edges);
		System.out.println(g.vertices);
		g.bfs(0);
		g.dfs(0);
	}
}

/*
Output:
0 1 0 1 
1 0 1 0 
0 1 0 1 
1 0 1 0 
4
4
0 1 3 2 
0 3 2 1 
*/
