package com.practice;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

class Graph{
	//Array of linked list
	LinkedList<Integer>[] adj;
	int vertices;
	int edges;
	
	Graph(int vertices){
		this.vertices = vertices;
		adj = new LinkedList[vertices];
		for(int i=0;i<vertices;i++) {
			adj[i] = new LinkedList<>();
		}
	}
	
	//For undirected graph
	public void addEdge(int u, int v) {
		adj[u].add(v);
		adj[v].add(u);
		edges++;
	}
	
	//For Directed graph
		public void addEdgeDirected(int u, int v) {
			adj[u].add(v);
			edges++;
		}
	
	public void display() {
		System.out.println(Arrays.toString(adj));
	}
	
	public void bfs(int src) {
		boolean[] visited = new boolean[vertices];
		Queue<Integer> q = new LinkedList<>();
		visited[src] = true;
		q.add(src);
		while(!q.isEmpty()) {
			int u = q.remove();
			System.out.print(u + " ");
			for(int v: adj[u]) {
				if(!visited[v]) {
					visited[v] = true;
					q.add(v);
				}
			}
		}
		System.out.println();
	}
	
	public void dfs(int src) {
		boolean[] visited = new boolean[vertices];
		Stack<Integer> s = new Stack<>();
		s.push(src);
		while(!s.isEmpty()) {
			int u = s.pop();
			if(!visited[u]) {
				visited[u] = true;
				System.out.print(u+" ");
				for(int v:adj[u]) {
					if(!visited[v]) {
						s.push(v);
					}
				}
			}
		}
		System.out.println();
	}
	
}

public class Prac2 {
	
	public static void main(String[] args) {
		Graph g = new Graph(5);
		g.addEdge(0, 1);
		g.addEdge(1, 2);
		g.addEdge(2, 3);
		g.addEdge(0, 3);
		g.addEdge(2, 4);
		g.display();
		System.out.println(g.edges);
		System.out.println(g.vertices);
		g.bfs(0);
		g.dfs(0);
	}
}


