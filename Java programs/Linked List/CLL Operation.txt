package com.practice;


class CSLL{
	Node head;
	Node tail;
	
	private class Node{
		private int data;
		private Node next;
		
		Node(int data){
			this.data = data;
		}
	}
	
	public void addFirst(int data) {
		Node node = new Node(data);
		if(head==null) {
			head=node;
			tail=node;
			return;
		}
		node.next = head;
		tail.next = node;
		head = node;
	}
	
	public void addLast(int data) {
		Node node = new Node(data);
		if(head==null) {
			head=node;
			tail=node;
			return;
		}
		node.next = tail.next;
		tail.next=node;
		tail=node;
	}
	
	public void add(int data, int pos) {
		if(pos<1 || pos > count()+1) {
			System.out.println("Invalid position");
			return;
		}
		Node node = new Node(data);
		if(pos==1) {
			addFirst(data);
			return;
		}
		if(pos==count()+1) {
			addLast(data);
			return;
		}
		Node temp=head;
		for(int i=1;i<pos-1;i++) {
			temp=temp.next;
		}
		node.next=temp.next;
		temp.next=node;
	}
	
	public void deleteFirst() {
		if(head==null) {
			System.out.println("Empty");
			return;
		}
		if(head.next==null) {
			head=null;
			tail=null;
			return;
		}
		tail.next=head.next;
		head = head.next;
	}
	
	public void deleteLast() {
		if(head==null) {
			System.out.println("Empty");
			return;
		}
		if(head.next==null) {
			head=null;
			tail=null;
			return;
		}
		Node temp=head;
		while(temp.next.next != head) {
			temp = temp.next;
		}
		temp.next = tail.next;
		tail=temp;	
	}
	
	public void delete(int pos) {
		if(pos<1 || pos > count()) {
			System.out.println("Invalid position");
			return;
		}
		if(pos==1) {
			deleteFirst();
			return;
		}
		if(pos==count()) {
			deleteLast();
			return;
		}
		Node temp=head;
		for(int i=1;i<pos-1;i++) {
			temp=temp.next;
		}
		temp.next = temp.next.next;
	}
	
	public void display() {
		if(head==null) {
			System.out.println("Empty");
			return;
		}
		System.out.print(head.data+" --> ");
		Node temp=head.next;
		while(temp!=head) {
			System.out.print(temp.data+" --> ");
			temp = temp.next;
		}
		System.out.println("null");
	}
	
	public int count(){
		int count = 1;
		if(head == null){
			return 0;
		}
		else if(head.link == null){
			return count;
		}
		Node temp = head.link;
		while(temp != head){
			count++;
			temp = temp.link;
		}
		return count;
	}
}

public class Practice1{
	public static void main(String[] args) {
		CSLL li = new CSLL();
		li.addLast(60);
		li.addFirst(40);
		li.addFirst(30);
		li.addFirst(20);
		li.addFirst(10);
		li.addLast(50);
		li.display();
		li.delete(0);
		li.display();
		System.out.println(li.count());
		
	}
	
}





